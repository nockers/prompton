type Query {
  work(id: ID!): WorkNode
  works(offset: Int, limit: Int, where: WorksWhereInput): [WorkNode!]!
  label(id: ID, name: String): LabelNode
  labels(offset: Int, limit: Int, where: LabelsWhereInput): [LabelNode!]!
  user(id: ID!): UserNode
  users(offset: Int, limit: Int, where: UsersWhereInput): [UserNode!]!
  request(id: ID!): RequestNode
  requests(offset: Int, limit: Int, where: RequestsWhereInput): [RequestNode!]!
  plan(id: ID!): PlanNode
  plans(offset: Int, limit: Int): [PlanNode!]!
  viewer: Viewer!
}

input WorksWhereInput {
  userId: String
  labelName: String
  color: String
  search: String
}

input LabelsWhereInput {
  search: String
}

input UsersWhereInput {
  search: String
}

input RequestsWhereInput {
  status: String
}

"""
ログインしているユーザ
"""
type Viewer {
  user: UserNode!
  works(offset: Int, limit: Int): [WorkNode!]!
  likedWorks(offset: Int, limit: Int): [WorkNode!]!
  bookmarkedWorks(offset: Int, limit: Int): [WorkNode!]!
  followees(offset: Int, limit: Int): [UserNode!]!
  requests(offset: Int, limit: Int): [RequestNode!]!
  sentRequests(offset: Int, limit: Int): [RequestNode!]!
  receivedRequests(offset: Int, limit: Int): [RequestNode!]!
  plans(offset: Int, limit: Int): [PlanNode!]!
}

"""
ブックマーク
"""
type BookmarkNode implements Node {
  id: ID!
  """
  作成日
  """
  createdAt: Int!
  """
  作品
  """
  work: WorkNode
  """
  フォルダ
  """
  folder: FolderNode
}

"""
フォルダ
"""
type FolderNode implements Node {
  id: ID!
  """
  作成日
  """
  createdAt: Int!
  """
  名前
  """
  name: String!
  """
  作品
  """
  works: [WorkNode!]!
}

"""
納品物
"""
type DeliverableNode implements Node {
  id: ID!
  createdAt: Int!
  name: String!
  description: String
  user: UserNode!
  request: RequestNode!
  work: WorkNode
  file: FileNode!
}

"""
ファイル
"""
type FileNode implements Node {
  id: ID!
  createdAt: Int!
  path: String!
  height: Int
  weight: Int
  type: String!
}

"""
スキ
"""
type LikeNode implements Node {
  id: ID!
  createdAt: Int!
  """
  作品
  """
  work: WorkNode
  """
  フォルダ
  """
  folder: FolderNode
}

"""
決済
"""
type PaymentNode implements Node {
  id: ID!
  createdAt: Int!
  user: UserNode!
  purpose: String!
  request: RequestNode
  amount: Int!
  isError: Boolean!
  transactionId: String
}

"""
プラン
"""
type PlanNode implements Node {
  id: ID!
  createdAt: Int!
  name: String!
  fee: Int!
  category: String!
  sort: Int!
  user: UserNode!
  requests: [RequestNode!]!
  isDeleted: Boolean!
  isPublic: Boolean!
  isActive: Boolean!
}

"""
リクエスト
"""
type RequestNode implements Node {
  id: ID!
  createdAt: Int!
  folder: FolderNode
  """
  送ったユーザ
  """
  sender: UserNode!
  """
  受け取ったユーザ
  """
  recipient: UserNode!
  works: [WorkNode!]!
  files: [FileNode!]!
  note: String!
  fee: Int!
  isPending: Boolean!
  isAccepted: Boolean!
  isRejected: Boolean!
  isCompleted: Boolean!
  isCanceled: Boolean!
  isCanceledBySender: Boolean!
  isCanceledByRecipient: Boolean!
  isTimeout: Boolean!
  """
  関連する決済
  """
  payments: [PaymentNode!]!
  hasSignature: Boolean!
  signature: String
  plan: PlanNode
  """
  手数料
  """
  commission: Int!
}

"""
作品
"""
type WorkNode implements Node {
  id: ID!
  createdAt: Int!
  """
  タイトル
  """
  title: String
  """
  ファイルのID
  """
  fileId: String!
  """
  プロンプト
  """
  prompt: String
  """
  学習モデル
  """
  model: String
  """
  いいね数
  """
  likesCount: Int!
  """
  ユーザ
  """
  user: UserNode!
  """
  関連する色
  """
  colors: [String!]!
  """
  関連するWebカラー
  """
  webColors: [String!]!
  """
  関連するラベル
  """
  labels: [LabelNode!]!
  """
  セーフサーチ・アダルト関連の内容である可能性
  """
  annotationAdult: String
  """
  セーフサーチ・悪ふざけの内容である可能性
  """
  annotationSpoof: String
  """
  セーフサーチ・医療関連の内容である可能性
  """
  annotationMedical: String
  """
  セーフサーチ・性的な内容である可能性
  """
  annotationRacy: String

  """
  セーフサーチ・暴力的な内容である可能性
  """
  annotationViolence: String
  """
  ログインしているユーザが作品に対していいね済みかどうか
  """
  isLiked: Boolean!
  """
  ログインしているユーザが作品に対してブックマーク済みかどうか
  """
  isBookmarked: Boolean!
  """
  削除されているかどうか
  """
  isDeleted: Boolean!
}

type WorkEdge implements Edge {
  cursor: String!
  node: WorkNode!
}

type WorksConnection implements Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [WorkEdge!]!
}

"""
ユーザ
"""
type UserNode implements Node {
  id: ID!
  createdAt: Int!
  """
  名前（日本語の使用が可能）
  """
  name: String!
  """
  ログイン名（英数字のみ）
  """
  login: String
  """
  アイコンのURL
  """
  avatarImageURL: String
  """
  アイコンのファイルID
  """
  avatarImageId: String
  """
  ヘッダー画像のURL
  """
  headerImageId: String
  """
  自己紹介
  """
  biography: String!
  """
  関連する作品
  """
  works: [WorkNode!]!
  """
  フォローされている数
  """
  followersCount: Int
  """
  フォローしている数
  """
  followeesCount: Int
  """
  依頼した数
  """
  requestsCount: Int!
  """
  依頼された数
  """
  receivedRequestsCount: Int!
  """
  作品の数
  """
  worksCount: Int!
  """
  ログインしているユーザにフォローされているかどうか
  """
  isFollower: Boolean!
  """
  ログインしているユーザをフォローしているかどうか
  """
  isFollowee: Boolean!
  """
  制作依頼を受け付けているかどうか
  """
  isRequestable: Boolean!
  """
  リクエストの最低報酬
  """
  minimumFee: Int!
  """
  リクエストの最大報酬
  """
  maximumFee: Int!
  """
  Stripeの決済方法
  """
  paymentMethod: PaymentMethodNode
}

type PaymentMethodNode implements Node {
  id: ID!
  type: String!
  cardBrand: String!
  cardLast4: String!
  cardExpMonth: String!
  cardExpYear: String!
  cardFunding: String!
  isLiveMode: Boolean!
}

"""
リアクション
"""
type ReactionNode implements Node {
  id: ID!
  text: String!
  count: Int!
  secretCount: Int!
  isConnected: Boolean!
}

"""
ラベル
"""
type LabelNode implements Node {
  id: ID!
  name: String!
  nameJA: String
  works: [WorkNode!]!
  count: Int!
}

type LabelEdge implements Edge {
  cursor: String!
  node: LabelNode!
}

type LabelsConnection implements Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [LabelEdge!]!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type Mutation {
  """
  ユーザを作成する
  """
  createUser(input: CreateUserInput!): Boolean
  """
  ユーザを更新する
  """
  updateUserProfile(input: UpdateUserProfileInput!): UserNode
  """
  ユーザの設定を更新する
  """
  updateUserRequestSettings(input: UpdateUserRequestSettingsInput!): UserNode
  """
  作品を作成する
  """
  createWork(input: CreateWorkInput!): WorkNode!
  """
  作品を削除する
  """
  deleteWork(input: DeleteWorkInput!): WorkNode!
  """
  作品を更新する
  """
  updateWork(input: UpdateWorkInput!): WorkNode!
  """
  作品のスキを作成する
  """
  createWorkLike(input: CreateWorkLikeInput!): WorkNode
  """
  作品のスキを削除する
  """
  deleteWorkLike(input: DeleteWorkLikeInput!): WorkNode
  """
  作品のブックマークを作成する
  """
  createWorkBookmark(input: CreateWorkBookmarkInput!): WorkNode
  """
  作品のブックマークを削除する
  """
  deleteWorkBookmark(input: DeleteWorkBookmarkInput!): WorkNode
  """
  ユーザをフォローする
  """
  followUser(input: FollowUserInput!): UserNode
  """
  ユーザのフォローは解除する
  """
  unfollowUser(input: UnfollowUserInput!): UserNode
  """
  プランを作成する
  """
  createPlan(input: CreatePlanInput!): PlanNode!
  """
  プランを更新する
  """
  updatePlan(input: DeletePlanInput!): PlanNode!
  """
  プランを順序を上げる
  """
  updatePlanSort(input: updatePlanSortInput!): PlanNode!
  """
  プランを削除する
  """
  deletePlan(input: DeletePlanInput!): Boolean
  """
  リクエストを作成する
  """
  createRequest(input: CreateRequestInput!): RequestNode!
  """
  リクエストを受諾する
  """
  acceptRequest(input: AcceptRequestInput!): RequestNode!
  """
  リクエストを拒否する
  """
  rejectRequest(input: RejectRequestInput!): RequestNode!
  """
  リクエストをキャンセルする
  """
  cancelRequest(input: CancelRequestInput!): RequestNode!
  """
  リクエストを完了とする
  """
  closeRequest(input: CloseRequestInput!): RequestNode!
  """
  納品物を作成する
  """
  createDeliverable(input: CreateDeliverableInput!): DeliverableNode!
  """
  納品物を削除する
  """
  updateDeliverable(input: UpdateDeliverableInput!): DeliverableNode!
  """
  納品物を削除する
  """
  deleteDeliverable(input: DeleteDeliverableInput!): Boolean
  """
  決済方法を登録する
  """
  createPaymentMethod(
    input: CreatePaymentMethodInput!
  ): CreatePaymentMethodResult
  """
  決済方法を削除する
  """
  deletePaymentMethod: Boolean
}

input CreateWorkInput {
  fileId: String!
}

input DeleteWorkInput {
  workId: String!
}

input UpdateWorkInput {
  workId: String!
  prompt: String
}

input CreateWorkLikeInput {
  workId: String!
}

input DeleteWorkLikeInput {
  workId: String!
}

input CreateWorkBookmarkInput {
  workId: String!
}

input DeleteWorkBookmarkInput {
  workId: String!
}

input FollowUserInput {
  userId: String!
}

input UnfollowUserInput {
  userId: String!
}

input CreateReactionInput {
  workId: String!
  text: String!
}

input DeleteReactionInput {
  workId: String!
  text: String!
}

input CreateUserInput {
  name: String!
}

input UpdateUserProfileInput {
  name: String!
  avatarFileId: String
  headerImageId: String
  biography: String!
}

input UpdateUserRequestSettingsInput {
  isRequestable: Boolean!
  minimumFee: Int!
  maximumFee: Int!
}

input LoginInput {
  token: String!
}

input CreatePlanInput {
  category: String!
  name: String!
  description: String!
  fee: Int!
}

input UpdatePlanInput {
  planId: String!
  name: String!
  description: String!
  fee: Int!
}

input updatePlanSortInput {
  planId: String!
}

input DecrementPlanSort {
  planId: String!
}

input DeletePlanInput {
  planId: String!
}

input CreateRequestInput {
  planId: String
  fee: Int!
  note: String!
  recipientId: String!
}

input AcceptRequestInput {
  requestId: String!
}

input RejectRequestInput {
  requestId: String!
}

input CloseRequestInput {
  requestId: String!
}

input CancelRequestInput {
  requestId: String!
}

input CreateDeliverableInput {
  requestId: String!
  fileId: String!
  name: String!
  description: String
}

input UpdateDeliverableInput {
  deliverableId: String!
  name: String!
  description: String
}

input DeleteDeliverableInput {
  deliverableId: String!
}

input CreatePaymentMethodInput {
  requestRecipientId: String
}

type CreatePaymentMethodResult {
  checkoutURL: String!
}

interface Node {
  id: ID!
}

interface Edge {
  cursor: String!
  node: Node!
}

interface Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [Edge!]!
}

directive @cacheControl(
  maxAge: Int
  scope: CacheControlScope
) on OBJECT | FIELD_DEFINITION

enum CacheControlScope {
  PUBLIC
  PRIVATE
}
