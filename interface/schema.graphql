type Query {
  # viewer: Viewer
  works(offset: Int, limit: Int, where: WorksWhereInput): [WorkNode!]!
  work(id: ID!): WorkNode
  user(id: ID!): UserNode
  labels(offset: Int, limit: Int): [LabelNode!]!
  label(id: ID, name: String): LabelNode
}

input WorksWhereInput {
  labelName: String
  color: String
}

type Viewer {
  works(offset: Int, limit: Int): [WorkNode!]!
}

type WorkNode implements Node {
  id: ID!
  createdAt: Int!
  title: String
  fileId: String!
  prompt: String
  model: String
  likesCount: Int!
  user: UserNode!
  colors: [String!]!
  webColors: [String!]!
  annotationAdult: String
  annotationMedical: String
  annotationRacy: String
  annotationSpoof: String
  annotationViolence: String
  labels: [LabelNode!]!
}

type WorkEdge implements Edge {
  cursor: String!
  node: WorkNode!
}

type WorksConnection implements Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [WorkEdge!]!
}

type UserNode implements Node {
  id: ID!
  createdAt: Int!
  name: String!
  login: String
  avatarImageURL: String
  avatarImageId: String
  headerImageId: String
  biography: String!
  works: [WorkNode!]!
  followersCount: Int
  followeesCount: Int
}

type ReactionNode implements Node {
  id: ID!
  text: String!
  count: Int!
  secretCount: Int!
  isConnected: Boolean!
}

type LabelNode implements Node {
  id: ID!
  name: String!
  works: [WorkNode!]!
  count: Int!
}

type LabelEdge implements Edge {
  cursor: String!
  node: LabelNode!
}

type LabelsConnection implements Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [LabelEdge!]!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type Mutation {
  createWork(input: CreateWorkInput!): WorkNode!
  updateWork(input: UpdateWorkInput!): WorkNode!
  createUser(input: CreateUserInput!): Boolean
  updateUser(input: UpdateUserInput!): Boolean
  createPostLike(input: CreatePostLikeInput!): WorkNode
  deletePostLike(input: DeletePostLikeInput!): WorkNode
  followUser(input: FollowUserInput!): UserNode
  unfollowUser(input: UnfollowUserInput!): UserNode
}

input CreateWorkInput {
  fileId: String!
}

input UpdateWorkInput {
  workId: String!
  prompt: String
}

input CreatePostLikeInput {
  workId: String!
}

input DeletePostLikeInput {
  workId: String!
}

input FollowUserInput {
  userId: String!
}

input UnfollowUserInput {
  userId: String!
}

input AddReactionInput {
  workId: String!
  text: String!
}

input CreateUserInput {
  name: String!
}

input UpdateUserInput {
  name: String!
  avatarFileId: String
  headerImageId: String
  biography: String!
}

input LoginInput {
  token: String!
}

interface Node {
  id: ID!
}

interface Edge {
  cursor: String!
  node: Node!
}

interface Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [Edge!]!
}
