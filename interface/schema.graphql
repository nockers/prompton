type Query {
  works(offset: Int, limit: Int, where: WorksWhereInput): [WorkNode!]!
  work(id: ID!): WorkNode
  user(id: ID!): UserNode
  labels(offset: Int, limit: Int, where: LabelsWhereInput): [LabelNode!]!
  label(id: ID, name: String): LabelNode
}

input WorksWhereInput {
  labelName: String
  color: String
  userId: String
  search: String
}

input LabelsWhereInput {
  search: String
}

"""
ログインしているユーザ
"""
type Viewer {
  works(offset: Int, limit: Int): [WorkNode!]!
}

"""
作品
"""
type WorkNode implements Node {
  id: ID!
  createdAt: Int!
  """
  タイトル
  """
  title: String
  """
  ファイルのID
  """
  fileId: String!
  """
  プロンプト
  """
  prompt: String
  """
  学習モデル
  """
  model: String
  """
  いいね数
  """
  likesCount: Int!
  """
  ユーザ
  """
  user: UserNode!
  """
  関連する色
  """
  colors: [String!]!
  """
  関連するWebカラー
  """
  webColors: [String!]!
  """
  関連するラベル
  """
  labels: [LabelNode!]!
  """
  セーフサーチ・アダルト関連の内容である可能性
  """
  annotationAdult: String
  """
  セーフサーチ・悪ふざけの内容である可能性
  """
  annotationSpoof: String
  """
  セーフサーチ・医療関連の内容である可能性
  """
  annotationMedical: String
  """
  セーフサーチ・性的な内容である可能性
  """
  annotationRacy: String

  """
  セーフサーチ・暴力的な内容である可能性
  """
  annotationViolence: String
  """
  ログインしているユーザが作品に対していいね済みかどうか
  """
  isLiked: Boolean!
  """
  ログインしているユーザが作品に対してブックマーク済みかどうか
  """
  isBookmarked: Boolean!
}

type WorkEdge implements Edge {
  cursor: String!
  node: WorkNode!
}

type WorksConnection implements Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [WorkEdge!]!
}

"""
ユーザ
"""
type UserNode implements Node {
  id: ID!
  createdAt: Int!
  """
  名前（日本語の使用が可能）
  """
  name: String!
  """
  ログイン名（英数字のみ）
  """
  login: String
  """
  アイコンのURL
  """
  avatarImageURL: String
  """
  アイコンのファイルID
  """
  avatarImageId: String
  """
  ヘッダー画像のURL
  """
  headerImageId: String
  """
  自己紹介
  """
  biography: String!
  """
  関連する作品
  """
  works: [WorkNode!]!
  """
  フォローされている数
  """
  followersCount: Int
  """
  フォローしている数
  """
  followeesCount: Int
  """
  ログインしているユーザにフォローされているかどうか
  """
  isFollower: Boolean!
  """
  ログインしているユーザをフォローしているかどうか
  """
  isFollowee: Boolean!
}

"""
リアクション
"""
type ReactionNode implements Node {
  id: ID!
  text: String!
  count: Int!
  secretCount: Int!
  isConnected: Boolean!
}

"""
ラベル
"""
type LabelNode implements Node {
  id: ID!
  name: String!
  nameJA: String
  works: [WorkNode!]!
  count: Int!
}

type LabelEdge implements Edge {
  cursor: String!
  node: LabelNode!
}

type LabelsConnection implements Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [LabelEdge!]!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type Mutation {
  """
  ユーザを作成する
  """
  createUser(input: CreateUserInput!): Boolean
  """
  ユーザを更新する
  """
  updateUser(input: UpdateUserInput!): Boolean
  """
  作品を作成する
  """
  createWork(input: CreateWorkInput!): WorkNode!
  """
  作品を更新する
  """
  updateWork(input: UpdateWorkInput!): WorkNode!
  """
  作品のスキを作成する
  """
  createWorkLike(input: CreateWorkLikeInput!): WorkNode
  """
  作品のスキを削除する
  """
  deleteWorkLike(input: DeleteWorkLikeInput!): WorkNode
  """
  作品のブックマークを作成する
  """
  createWorkBookmark(input: CreateWorkBookmarkInput!): WorkNode
  """
  作品のブックマークを削除する
  """
  deleteWorkBookmark(input: DeleteWorkBookmarkInput!): WorkNode
  """
  ユーザをフォローする
  """
  followUser(input: FollowUserInput!): UserNode
  """
  ユーザのフォローは解除する
  """
  unfollowUser(input: UnfollowUserInput!): UserNode
}

input CreateWorkInput {
  fileId: String!
}

input UpdateWorkInput {
  workId: String!
  prompt: String
}

input CreateWorkLikeInput {
  workId: String!
}

input DeleteWorkLikeInput {
  workId: String!
}

input CreateWorkBookmarkInput {
  workId: String!
}

input DeleteWorkBookmarkInput {
  workId: String!
}

input FollowUserInput {
  userId: String!
}

input UnfollowUserInput {
  userId: String!
}

input CreateReactionInput {
  workId: String!
  text: String!
}

input DeleteReactionInput {
  workId: String!
  text: String!
}

input CreateUserInput {
  name: String!
}

input UpdateUserInput {
  name: String!
  avatarFileId: String
  headerImageId: String
  biography: String!
}

input LoginInput {
  token: String!
}

interface Node {
  id: ID!
}

interface Edge {
  cursor: String!
  node: Node!
}

interface Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [Edge!]!
}
