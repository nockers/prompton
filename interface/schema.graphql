type Query {
  # viewer: Viewer
  posts(offset: Int, limit: Int, where: PostsWhereInput): [PostNode!]!
  post(id: ID!): PostNode
  user(id: ID!): UserNode
  labels(offset: Int, limit: Int): [LabelNode!]!
  label(id: ID, name: String): LabelNode
}

input PostsWhereInput {
  labelName: String
  color: String
}

type Viewer {
  posts(offset: Int, limit: Int): [PostNode!]!
}

type PostNode implements Node {
  id: ID!
  createdAt: Int!
  title: String
  fileId: String!
  prompt: String
  model: String
  likeCount: Int!
  user: UserNode!
  colors: [String!]!
  webColors: [String!]!
  annotationAdult: String
  annotationMedical: String
  annotationRacy: String
  annotationSpoof: String
  annotationViolence: String
  labels: [LabelNode!]!
}

type PostEdge implements Edge {
  cursor: String!
  node: PostNode!
}

type PostsConnection implements Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [PostEdge!]!
}

type UserNode implements Node {
  id: ID!
  createdAt: Int!
  name: String!
  login: String
  avatarImageURL: String
  avatarImageId: String
  headerImageId: String
  biography: String!
  posts: [PostNode!]!
}

type ReactionNode implements Node {
  id: ID!
  text: String!
  count: Int!
  secretCount: Int!
  isConnected: Boolean!
}

type LabelNode implements Node {
  id: ID!
  name: String!
  posts: [PostNode!]!
  count: Int!
}

type LabelEdge implements Edge {
  cursor: String!
  node: LabelNode!
}

type LabelsConnection implements Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [LabelEdge!]!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
}

type Mutation {
  createPost(input: CreatePostInput!): PostNode!
  updatePost(input: UpdatePostInput!): PostNode!
  createUser(input: CreateUserInput!): Boolean
  updateUser(input: UpdateUserInput!): Boolean
  # addReaction(input: AddReactionInput!): PostNode!
}

input CreatePostInput {
  fileId: String!
}

input UpdatePostInput {
  postId: String!
  prompt: String
}

input AddReactionInput {
  postId: String!
  text: String!
}

input CreateUserInput {
  name: String!
}

input UpdateUserInput {
  name: String!
  avatarFileId: String
  headerImageId: String
  biography: String!
}

input LoginInput {
  token: String!
}

interface Node {
  id: ID!
}

interface Edge {
  cursor: String!
  node: Node!
}

interface Connection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [Edge!]!
}
