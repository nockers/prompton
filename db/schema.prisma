datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id                   String         @id @map("id")
  createdAt            DateTime       @default(now()) @map("created_at")
  updatedAt            DateTime       @updatedAt @map("updated_at")
  index                Int            @unique @default(autoincrement()) @map("index")
  login                String?        @unique @map("login")
  name                 String         @map("name")
  description          String         @default("") @map("description")
  email                String?        @unique @map("email")
  avatarFileId         String?        @map("avatar_file_id")
  avatarImageURL       String?        @map("avatar_image_url")
  role                 UserRole       @default(USER) @map("role")
  isDeleted            Boolean        @default(false) @map("is_deleted")
  posts                Post[]         @relation("user_posts")
  tokens               UserToken[]    @relation("user_tokens")
  sessions             Session[]      @relation("user_sessions")
  configLanguage       Language       @default(EN) @map("config_language")
  configColorMode      ColorMode      @default(LIGHT) @map("config_color_mode")
  followees            Friendship[]   @relation("user_followers")
  followeesCount       Int            @default(0) @map("followees_count")
  followers            Friendship[]   @relation("user_followees")
  followersCount       Int            @default(0) @map("followers_count")
  likes                Like[]         @relation("user_likes")
  reactions            Reaction[]     @relation("user_reactions")
  bookmarks            Bookmark[]     @relation("user_bookmarks")
  comments             Comment[]      @relation("user_comments")
  notifications        Notification[] @relation("user_notifications")
  requests             Request[]      @relation("user_sent_requests")
  receivedRequests     Request[]      @relation("user_received_requests")
  folders              Folder[]       @relation("user_folders")
  plans                Plan[]         @relation("user_plans")
  files                File[]         @relation("user_files")
  isRequestable        Boolean        @default(false) @map("is_requestable")
  isRequestableForFree Boolean        @default(false) @map("is_requestable_for_free")
  isPublic             Boolean        @default(true) @map("is_public")
  payments             Payment[]      @relation("user_payments")
  stripeCustomerId     String         @default("") @map("stripe_customer_id")
  isBeta               Boolean        @default(false) @map("is_beta")
  isPremium            Boolean        @default(false) @map("is_premium")
  isAdmin              Boolean        @default(false) @map("is_admin")
  minimumFee           Int            @default(1000) @map("minimum_fee")
  maximumFee           Int            @default(8000) @map("maximum_fee")
  isVerified           Boolean        @default(false) @map("is_verified")
  prompts              Prompt[]       @relation("user_prompts")
  permissions          Permission[]   @map("permissions")

  @@map("users")
}

model Session {
  id                 String    @id @default(cuid()) @map("id")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  expiresAt          DateTime? @map("expires_at")
  handle             String    @unique @map("handle")
  hashedSessionToken String?   @map("hashed_session_token")
  antiCSRFToken      String?   @map("anti_csrf_token")
  publicData         String?   @map("public_data")
  privateData        String?   @map("private_data")
  user               User?     @relation("user_sessions", fields: [userId], references: [id])
  userId             String?   @map("user_id")

  @@map("sessions")
}

model UserToken {
  id          String   @id @map("id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  hashedToken String   @map("hashed_token")
  type        String   @map("token")
  expiresAt   DateTime @map("expires_at")
  sentTo      String   @map("sent_to")
  user        User     @relation("user_tokens", fields: [userId], references: [id])
  userId      String   @map("user_id")

  @@unique([hashedToken, type])
  @@map("user_tokens")
}

model Friendship {
  id            String         @id @map("id")
  createdAt     DateTime       @default(now()) @map("created_at")
  followee      User           @relation("user_followees", fields: [followeeId], references: [id])
  followeeId    String         @map("followee_id")
  follower      User           @relation("user_followers", fields: [followerId], references: [id])
  followerId    String         @map("follower_id")
  notifications Notification[] @relation("notifications_friendship")

  @@unique([followerId, followeeId])
  @@index([followerId, createdAt])
  @@map("friendships")
}

model Post {
  id                 String         @id @map("id")
  createdAt          DateTime       @default(now()) @map("created_at")
  updatedAt          DateTime       @updatedAt @map("updated_at")
  index              Int            @unique @default(autoincrement()) @map("index")
  dateText           String         @map("date_text")
  tags               Tag[]          @relation("post_tags")
  isDeleted          Boolean        @default(false) @map("is_deleted")
  isPublic           Boolean        @default(true) @map("is_public")
  isPublicPrompt     Boolean        @default(true) @map("is_public_prompt")
  user               User           @relation("user_posts", fields: [userId], references: [id])
  userId             String         @map("user_id")
  fileId             String         @unique @map("file_id")
  inputtedPrompt     String?        @map("inputted_prompt")
  detectedPrompt     String?        @map("deleted_prompt")
  software           Software?      @map("software")
  detectedSoftware   Software?      @map("detected_software")
  body               String?        @map("body")
  title              String?        @map("title")
  resizableImageURL  String?        @map("resizable_image_url")
  viewsCount         Int            @default(0) @map("views_count")
  likesCount         Int            @default(0) @map("likes_count")
  likes              Like[]         @relation("post_likes")
  reactions          Reaction[]     @relation("post_reactions")
  bookmarks          Bookmark[]     @relation("post_bookmarks")
  comments           Comment[]      @relation("post_comments")
  annotationAdult    String?        @map("annotation_adult")
  annotationMedical  String?        @map("annotation_medical")
  annotationRacy     String?        @map("annotation_racy")
  annotationSpoof    String?        @map("annotation_spoof")
  annotationViolence String?        @map("annotation_violence")
  colors             String[]       @map("colors")
  labels             Label[]        @relation("post_labels")
  webColors          String[]       @map("web_colors")
  notifications      Notification[] @relation("notifications_post")
  folder             Folder?        @relation("folder_posts", fields: [folderId], references: [id])
  folderId           String?        @map("folder_id")
  request            Request?       @relation("request_posts", fields: [requestId], references: [id])
  requestId          String?        @map("request_id")
  seed               String?        @map("seed")
  detectedSeed       String?        @map("detected_seed")
  isDeliverable      Boolean        @default(false) @map("is_deliverable")
  description        String?        @map("description")
  prompt             Prompt?        @relation("prompt_posts", fields: [promptId], references: [id])
  promptId           String?        @map("prompt_id")
  promptFirstPosts   Prompt[]       @relation("prompt_first_posts")
  promptSecondPosts  Prompt[]       @relation("prompt_second_posts")

  @@map("posts")
}

model Page {
  id          String   @id @map("id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  title       String   @map("title")
  description String?  @map("description")
  slug        String   @unique @map("slug")
  isPublic    Boolean  @default(true) @map("is_public")

  @@map("pages")
}

model Folder {
  id          String     @id @map("id")
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  name        String     @map("name")
  description String?    @map("description")
  user        User       @relation("user_folders", fields: [userId], references: [id])
  userId      String     @map("user_id")
  posts       Post[]     @relation("folder_posts")
  likes       Like[]     @relation("folder_likes")
  bookmarks   Bookmark[] @relation("folder_bookmarks")
  request     Request[]  @relation("folder_requests")
  color       String?    @map("color")
  isPublic    Boolean    @default(true) @map("is_public")

  @@map("folders")
}

model Request {
  id                    String    @id @map("id")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  sender                User      @relation("user_sent_requests", fields: [senderId], references: [id])
  senderId              String    @map("sender_id")
  folder                Folder?   @relation("folder_requests", fields: [folderId], references: [id])
  folderId              String?   @map("folder_id")
  recipient             User      @relation("user_received_requests", fields: [recipientId], references: [id])
  recipientId           String    @map("recipient_id")
  posts                 Post[]    @relation("request_posts")
  files                 File[]    @relation("request_files")
  note                  String?   @map("note")
  fee                   Int       @map("fee")
  commission            Int       @map("commission")
  isAccepted            Boolean   @default(false) @map("is_accepted")
  isRejected            Boolean   @default(false) @map("is_rejected")
  isCompleted           Boolean   @default(false) @map("is_completed")
  isCanceled            Boolean   @default(false) @map("is_canceled")
  isCanceledBySender    Boolean   @default(false) @map("is_canceled_by_system")
  isCanceledByRecipient Boolean   @default(false) @map("is_canceled_by_recipient")
  isTimeout             Boolean   @default(false) @map("is_timeout")
  payments              Payment[] @relation("request_payments")
  hasSignature          Boolean   @default(false) @map("has_signature")
  signature             String?   @map("signature")
  plan                  Plan?     @relation("plan_requests", fields: [planId], references: [id])
  planId                String?   @map("plan_id")
  isDeleted             Boolean   @default(false) @map("is_deleted")
  isPublic              Boolean   @default(true) @map("is_public")
  isAnonymous           Boolean   @default(false) @map("is_anonymous")
  message               String?   @map("message")

  @@map("requests")
}

model Plan {
  id          String       @id @map("id")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  name        String       @map("name")
  description String       @map("description")
  user        User         @relation("user_plans", fields: [userId], references: [id])
  userId      String       @map("user_id")
  fee         Int          @map("fee")
  category    PlanCategory @default(ILLUSTRATION_FREEDOM) @map("category")
  requests    Request[]    @relation("plan_requests")
  isDeleted   Boolean      @default(false) @map("is_deleted")
  isPublic    Boolean      @default(true) @map("is_public")
  sort        Int          @default(0) @map("sort")
  isActive    Boolean      @default(true) @map("is_active")

  @@map("plans")
}

model Payment {
  id            String   @id @map("id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  user          User     @relation("user_payments", fields: [userId], references: [id])
  userId        String   @map("user_id")
  purpose       String   @map("purpose")
  request       Request? @relation("request_payments", fields: [requestId], references: [id])
  requestId     String?  @unique @map("request_id")
  amount        Int      @map("amount")
  isError       Boolean  @default(false) @map("is_error")
  transactionId String?  @map("transaction_id")

  @@map("payments")
}

model Notification {
  createdAt    DateTime         @default(now()) @map("created_at")
  friendship   Friendship?      @relation("notifications_friendship", fields: [friendshipId], references: [id])
  friendshipId String?          @map("friendship_id")
  id           String           @id @map("id")
  isRead       Boolean          @default(false) @map("is_read")
  like         Like?            @relation("notifications_like", fields: [likeId], references: [id])
  likeId       String?          @map("like_id")
  post         Post?            @relation("notifications_post", fields: [postId], references: [id])
  postId       String?          @map("post_id")
  type         NotificationType @map("type")
  uniqueId     String           @map("unique_id")
  user         User?            @relation("user_notifications", fields: [userId], references: [id])
  userId       String?          @map("user_id")

  @@unique([userId, type, uniqueId])
  @@index([userId, createdAt])
  @@map("notifications")
}

model Label {
  id        String   @id @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String   @unique @map("name")
  nameJA    String?  @map("name_ja")
  posts     Post[]   @relation("post_labels")
  isDeleted Boolean  @default(false) @map("is_deleted")

  @@map("labels")
}

model Like {
  id            String         @id @map("id")
  createdAt     DateTime       @default(now()) @map("created_at")
  post          Post?          @relation("post_likes", fields: [postId], references: [id])
  postId        String?        @map("post_id")
  folder        Folder?        @relation("folder_likes", fields: [folderId], references: [id])
  folderId      String?        @map("folder_id")
  user          User           @relation("user_likes", fields: [userId], references: [id])
  userId        String         @map("user_id")
  prompt        Prompt?        @relation("prompt_likes", fields: [promptId], references: [id])
  promptId      String?        @map("prompt_id")
  notifications Notification[] @relation("notifications_like")

  @@unique([userId, postId])
  @@unique([userId, folderId])
  @@index([userId, createdAt])
  @@map("likes")
}

model Bookmark {
  id        String   @id @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation("user_bookmarks", fields: [userId], references: [id])
  userId    String   @map("user_id")
  post      Post?    @relation("post_bookmarks", fields: [postId], references: [id])
  postId    String?  @map("post_id")
  folder    Folder?  @relation("folder_bookmarks", fields: [folderId], references: [id])
  folderId  String?  @map("folder_id")
  prompt    Prompt?  @relation("prompt_bookmarks", fields: [promptId], references: [id])
  promptId  String?  @map("prompt_bookmarks")

  @@unique([userId, postId])
  @@unique([userId, folderId])
  @@unique([userId, promptId])
  @@index([userId, createdAt])
  @@map("bookmarks")
}

model Comment {
  id        String   @id @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  body      String   @map("body")
  post      Post     @relation("post_comments", fields: [postId], references: [id])
  postId    String   @map("post_id")
  user      User     @relation("user_comments", fields: [userId], references: [id])
  userId    String   @map("user_id")
  prompt    Prompt   @relation("prompt_comments", fields: [promptId], references: [id])
  promptId  String   @map("prompt_id")

  @@unique([userId, promptId])
  @@index([userId, createdAt])
  @@map("comments")
}

model Reaction {
  id        String   @id @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  text      String   @map("text")
  post      Post     @relation("post_reactions", fields: [postId], references: [id])
  postId    String   @map("post_id")
  users     User[]   @relation("user_reactions")
  count     Int      @default(0) @map("count")

  @@unique([postId, text])
  @@index([postId])
  @@map("reactions")
}

model Tag {
  id        String   @id @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String   @unique @map("name")
  posts     Post[]   @relation("post_tags")

  @@map("tags")
}

model Event {
  id           String   @id @map("id")
  createdAt    DateTime @default(now()) @map("created_at")
  timestamp    DateTime @map("timestamp")
  index        Int      @unique @default(autoincrement()) @map("index")
  type         String   @map("type")
  data         Json     @map("data")
  collectionId String?  @map("collection_id")
  documentId   String?  @map("document_id")
  userId       String?  @map("user_id")

  @@map("events")
}

model File {
  id        String   @id @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  path      String   @map("path")
  height    Int?     @map("height")
  width     Int?     @map("width")
  type      String   @map("type")
  user      User?    @relation("user_files", fields: [userId], references: [id])
  userId    String?  @map("user_id")
  request   Request? @relation("request_files", fields: [requestId], references: [id])
  requestId String?  @map("request_id")

  @@map("files")
}

model Prompt {
  id           String     @id @map("id")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  text         String     @map("word")
  texts        String[]   @map("texts")
  description  String?    @map("description")
  user         User?      @relation("user_prompts", fields: [userId], references: [id])
  userId       String?    @map("user_id")
  likes        Like[]     @relation("prompt_likes")
  likesCount   Int        @default(0) @map("likes_count")
  title        String?    @map("title")
  titleJA      String?    @map("title_ja")
  isPublic     Boolean    @default(false)
  isNsfw       Boolean    @map("is_nsfw")
  bookmarks    Bookmark[] @relation("prompt_bookmarks")
  comments     Comment[]  @relation("prompt_comments")
  categorySlug String?    @map("category_slug")
  // category          PromptCategory? @relation("prompt_category", fields: [categoryId], references: [name])
  // categoryId        String?         @map("category_id")
  isDeleted    Boolean    @default(false) @map("is_deleted")
  isSingle     Boolean    @default(true) @map("is_single")
  isBase       Boolean    @default(false) @map("is_base")
  posts        Post[]     @relation("prompt_posts")
  firstPost    Post?      @relation("prompt_first_posts", fields: [firstPostId], references: [id])
  firstPostId  String?    @map("first_post_id")
  secondPost   Post?      @relation("prompt_second_posts", fields: [secondPostId], references: [id])
  secondPostId String?    @map("second_post_id")

  @@map("prompts")
}

// model PromptCategory {
//   id          String   @id @map("id")
//   createdAt   DateTime @default(now()) @map("created_at")
//   updatedAt   DateTime @updatedAt @map("updated_at")
//   name        String   @unique @map("name")
//   description String?  @map("description")
//   prompts     Prompt[] @relation("prompt_category")
//   slug        String   @unique @map("slug")

//   @@map("prompt_categories")
// }

enum NotificationType {
  FOLLOW
  FRIENDSHIP
  LIKE
  COMMENT
  PROMPT

  @@map("notification_type")
}

enum UserRole {
  ADMIN
  USER
  SYSTEM

  @@map("user_role")
}

enum ColorMode {
  LIGHT
  DARK
  SYSTEM

  @@map("color_mode")
}

enum Language {
  EN
  JA

  @@map("language")
}

enum Software {
  NOVEL_AI
  STABLE_DIFFUSION
  MIDJOURNEY
  NIJIJOURNEY
  DALL_E_2
  HOLARA

  @@map("software")
}

enum PlanCategory {
  ILLUSTRATION
  ILLUSTRATION_FREEDOM
  ILLUSTRATION_MODIFICATION
  ILLUSTRATION_IMAGE_TO_IMAGE

  @@map("plan_category")
}

enum Permission {
  CREATE_PROMPT_CATEGORY
  DELETE_POST

  @@map("permission")
}
