datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

model User {
  id              String      @id @map("id")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  index           Int         @unique @default(autoincrement()) @map("index")
  login           String?     @unique @map("login")
  name            String      @map("name")
  description     String      @default("") @map("description")
  email           String?     @unique @map("email")
  avatarFileId    String?     @map("avatar_file_id")
  avatarImageURL  String?     @map("avatar_image_url")
  role            UserRole    @default(USER) @map("role")
  isDeleted       Boolean     @default(false) @map("is_deleted")
  posts           Post[]      @relation("user_posts")
  tokens          UserToken[] @relation("user_tokens")
  sessions        Session[]   @relation("user_sessions")
  configLanguage  Language    @default(EN) @map("config_language")
  configColorMode ColorMode   @default(LIGHT) @map("config_color_mode")
  likes           Like[]      @relation("user_likes")
  reactions       Reaction[]  @relation("user_reactions")
  bookmarks       Bookmark[]  @relation("user_bookmarks")
  comments        Comment[]   @relation("user_comments")

  @@map("users")
}

model Session {
  id                 String    @id @default(cuid()) @map("id")
  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")
  expiresAt          DateTime? @map("expires_at")
  handle             String    @unique @map("handle")
  hashedSessionToken String?   @map("hashed_session_token")
  antiCSRFToken      String?   @map("anti_csrf_token")
  publicData         String?   @map("public_data")
  privateData        String?   @map("private_data")
  user               User?     @relation("user_sessions", fields: [userId], references: [id])
  userId             String?   @map("user_id")

  @@map("sessions")
}

model UserToken {
  id          String   @id @map("id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  hashedToken String   @map("hashed_token")
  type        String   @map("token")
  expiresAt   DateTime @map("expires_at")
  sentTo      String   @map("sent_to")
  user        User     @relation("user_tokens", fields: [userId], references: [id])
  userId      String   @map("user_id")

  @@unique([hashedToken, type])
  @@map("user_tokens")
}

model Post {
  id        String     @id @map("id")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  index     Int        @unique @default(autoincrement()) @map("index")
  dateText  String     @map("date_text")
  tags      Tag[]      @relation("post_tags")
  isDeleted Boolean    @default(false) @map("is_deleted")
  user      User       @relation("user_posts", fields: [userId], references: [id])
  userId    String     @map("user_id")
  fileId    String     @map("file_id")
  prompt    String?    @map("prompt")
  model     Model?     @map("model")
  body      String?    @map("body")
  title     String?    @map("title")
  viewCount Int        @default(0) @map("view_count")
  likes     Like[]     @relation("post_likes")
  reactions Reaction[] @relation("post_reactions")
  bookmark  Bookmark[] @relation("post_bookmarks")
  comments  Comment[]  @relation("post_comments")

  @@map("posts")
}

model Like {
  id        String   @id @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  post      Post     @relation("post_likes", fields: [postId], references: [id])
  postId    String   @map("post_id")
  user      User     @relation("user_likes", fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@unique([userId, postId])
  @@index([userId, createdAt])
  @@map("likes")
}

model Comment {
  id        String   @id @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  body      String   @map("body")
  post      Post     @relation("post_comments", fields: [postId], references: [id])
  postId    String   @map("post_id")
  user      User     @relation("user_comments", fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@unique([userId, postId])
  @@index([userId, createdAt])
  @@map("comments")
}

model Reaction {
  id        String   @id @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  text      String   @map("text")
  post      Post     @relation("post_reactions", fields: [postId], references: [id])
  postId    String   @map("post_id")
  users     User[]   @relation("user_reactions")
  count     Int      @default(0) @map("count")

  @@unique([postId, text])
  @@index([postId])
  @@map("reactions")
}

model Bookmark {
  createdAt DateTime @default(now()) @map("created_at")
  post      Post     @relation("post_bookmarks", fields: [postId], references: [id])
  postId    String   @map("post_id")
  user      User     @relation("user_bookmarks", fields: [userId], references: [id])
  userId    String   @map("user_id")

  @@unique([userId, postId])
  @@index([userId, createdAt])
  @@map("bookmarks")
}

model Tag {
  id        String   @id @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String   @unique @map("name")
  posts     Post[]   @relation("post_tags")

  @@map("tags")
}

model Event {
  id           String   @id @map("id")
  createdAt    DateTime @default(now()) @map("created_at")
  timestamp    DateTime @map("timestamp")
  index        Int      @unique @default(autoincrement()) @map("index")
  type         String   @map("type")
  data         Json     @map("data")
  collectionId String?  @map("collection_id")
  documentId   String?  @map("document_id")
  userId       String?  @map("user_id")

  @@map("events")
}

enum UserRole {
  ADMIN
  USER
  SYSTEM

  @@map("user_role")
}

enum ColorMode {
  LIGHT
  DARK
  SYSTEM

  @@map("color_mode")
}

enum Language {
  EN
  JA

  @@map("language")
}

enum Model {
  NOVEL_AI
  STABLE_DIFFUSION
  MIDJOURNEY
  DALL_E_2
}
